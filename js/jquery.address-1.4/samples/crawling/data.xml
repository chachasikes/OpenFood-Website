<?xml version="1.0" encoding="utf-8"?>
<data>
    <page href="/" title="Home">
        <h1>Making AJAX Applications Crawlable</h1>
        <p>If you're running an AJAX application with content that you'd like to appear in
        search results, we have a new process that, when implemented, can help Google
        (and potentially other search engines) crawl and index your content.
        Historically, AJAX applications have been difficult for search engines to
        process because AJAX content is produced dynamically by the browser and thus not
        visible to crawlers. While there are existing methods for dealing with this
        problem, they involve regular manual maintenance to keep the content up-to-date.</p>
        <h2><a href="/learn-more">Learn more</a></h2> 
        <p>Learn why search engines don't see the content you see and what needs to happen 
        to fix this.</p>
        <h2><a href="/?page=/getting-started">Getting started guide</a></h2> 
        <p>Get started in making your AJAX application visible to search engines. If you are 
        in a hurry, you can start here, but AJAX crawling is a complex topic, so we recommend 
        reading all the documentation.</p>
        <h2><a href="/?page=/html-snapshot">Creating HTML snapshots</a></h2> 
        <p>Learn more about creating HTML snapshots, and which technique might be best suited 
        for your application.</p>
        <h2><a href="/faq">Frequently asked questions</a></h2> 
        <p>Having trouble?  Check out the frequently asked questions.</p>
        <h2><a href="/specification">Full Specification</a></h2> 
        <p>Get the details.</p>
        <p><a href="http://code.google.com/web/ajaxcrawling/index.html">More at 
        Google.com</a></p>
    </page>
    <page href="/learn-more" title="Learn More">
        <h1>Learn More</h1>
        <h2>What the user sees, what the crawler sees</h2>
        <p>In recent years, more and more of the web has become populated with AJAX-based 
        applications, replacing static HTML pages. This is a great development for users 
        because it makes applications much faster and richer. But making your application more 
        responsive has come at a huge cost: crawlers are not able to see any content that is 
        created dynamically. As a result, the most modern applications are also the ones that 
        are often the least searchable.</p>
        <p><a href="http://code.google.com/web/ajaxcrawling/docs/learn-more.html">More at 
        Google.com</a></p>
    </page>
    <page href="/?page=/getting-started" title="Getting Started">
        <h1>Getting Started</h1>
        <p>This document outlines the steps that are necessary in order to make your AJAX 
        application crawlable. Once you have fully understood each of these steps, it should 
        not take you very long to actually make your application crawlable! However, you do 
        need to understand each of the steps involved, so we recommend reading this guide in 
        its entirety.</p>
        <!-- page break -->
        <h2>Overview of Solution</h2>
        <p>Briefly, the solution works as follows: the crawler finds a pretty AJAX URL (that 
        is, a URL containing a #! hash fragment). It then requests the content for this URL 
        from your server in a slightly modified form. Your web server returns the content in 
        the form of an HTML snapshot, which is then processed by the crawler.</p>
        <p><a href="http://code.google.com/web/ajaxcrawling/docs/getting-started.html">More at 
        Google.com</a></p>
    </page>
    <page href="/?page=/html-snapshot" title="Creating HTML Snapshots">
        <h1>How do I create an HTML snapshot?</h1>
        <h2>Generating HTML snapshots</h2>
        <p>As long as your app observes the URL mapping and HTML snapshot scheme described in the 
        <a href="/specification">Specification</a> section, your app is visible to the crawler. 
        It <em>does not matter</em> whether</p>
        <ul> 
            <li>your app uses any Google technology (for example, 
            <a href="http://code.google.com/appengine/">Google App Engine</a>, 
            <a href="http://code.google.com/webtoolkit/">Google Web Toolkit</a>, 
            <a href="http://code.google.com/closure">Closure</a>)</li>
            <li>your app uses a specific JavaScript library (for example, 
            <a href="http://jquery.com/">jQuery</a>, <a href="http://script.aculo.us/">script.aculo.us</a>, 
            <a href="http://www.prototypejs.org/">Prototype</a>)</li>
            <li>your app uses a specific server-side technology (for example, 
            <a href="http://php.net/index.php">PHP</a> or <a href="http://www.asp.net/">ASP.NET</a>)</li>
        </ul> 
        <p>The only requirement is that your app uses AJAX. But otherwise you wouldn't be reading 
        this.</p> 
        <p>It's impossible to document all the different ways web applications can be developed. 
        There are too many web frameworks, libraries, and so forth to enumerate. Likewise, there are 
        many ways to create HTML snapshots, and which way is best for your application depends entirely 
        on how your web app is implemented. Let's discuss some common scenarios.</p>
        <p><a href="http://code.google.com/web/ajaxcrawling/docs/html-snapshot.html">More at 
        Google.com</a></p>
    </page>
    <page href="/faq" title="FAQ">
        <h1>Frequently Asked Questions</h1>
        <ul> 
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#whentousewhich">When should I 
            use <code>_escaped_fragment_</code> and when should I use <code>#!</code> in my AJAX URLs?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#inaction">Where can I see this 
            scheme in action?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#whatifnot">What happens if I 
            choose not to implement the AJAX crawling scheme (with <code>#!</code>) on my site?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#whereinresults">Where will my 
            pages appear in the search results?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#howcurrent">How current should 
            I keep my content?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#nohashfragments">What if my app 
            doesn't use hash fragments?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#urlswithouthashfragments">What 
            about URLs that don't have a hash fragment?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#uglyurlseverywhere">Will this 
            approach lead to a proliferation of "ugly" _escaped_fragment_ URLs?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#cloaking">Does this scheme open 
            the door to cloaking?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#excludesomeurls">What if my site 
            has some hash fragment URLs that should not be crawled?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#searchforescpfr">Will I be able to 
            search for <code>_escaped_fragment_</code> URLs?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#existing">What about existing uses 
            of #! in hash fragments?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#accessibility">What about 
            accessibility?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#linkrelcanonical">If using 
            <code>rel="canonical"</code>, should webmasters use <code>&lt;link rel="canonical" 
            href="http://example.com/ajax.html?_escaped_fragment_=foo=123" /></code> or <code>&lt;link 
            rel="canonical" href="http://example.com/ajax.html#!foo=123" /></code>?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#sitemap">What URL should I put in 
            my Sitemap?</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#productfeeds">How will the #! URLs 
            affect product feeds that companies are submitting? They would like the same URLs for Product Search 
            and general Web Search.</a></li>
            <li><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html#htmlunit">I'm using HtmlUnit as 
            the headless browser, and it "doesn't work." Why not?</a></li>
        </ul>
        <p><a href="http://code.google.com/web/ajaxcrawling/docs/faq.html">More at 
        Google.com</a></p>
    </page>
    <page href="/specification" title="Full Specification">
        <h1>Full Specification</h1>
        <h2>Abstract</h2> 
        <p>This document describes an agreement between web servers and search engine crawlers that allows for 
        dynamically created content to be visible to crawlers. Google currently supports this agreement. The hope 
        is that other search engines will also adopt this proposal.</p>
        <p><a href="http://code.google.com/web/ajaxcrawling/docs/specification.html">More at 
        Google.com</a></p>
    </page>
</data>